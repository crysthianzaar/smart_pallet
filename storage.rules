rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function hasRole(role) {
      return isAuthenticated() && request.auth.token.role == role;
    }
    
    function isAdmin() {
      return hasRole('admin');
    }
    
    function isConferente() {
      return hasRole('conferente');
    }
    
    function hasAnyRole() {
      return isAdmin() || isConferente();
    }
    
    function isValidImageType() {
      return resource.contentType.matches('image/.*');
    }
    
    function isValidPdfType() {
      return resource.contentType == 'application/pdf';
    }
    
    function isValidFileSize() {
      return resource.size < 15 * 1024 * 1024; // 15MB limit
    }

    // Pallet photos - origin and destination
    match /pallets/{palletId}/origem/{photoId} {
      allow read: if hasAnyRole();
      allow write: if hasAnyRole() && isValidImageType() && isValidFileSize();
    }
    
    match /pallets/{palletId}/destino/{photoId} {
      allow read: if hasAnyRole();
      allow write: if hasAnyRole() && isValidImageType() && isValidFileSize();
    }

    // Comparison evidence files
    match /comparisons/{comparisonId}/evidencias/{fileId} {
      allow read: if hasAnyRole();
      allow write: if hasAnyRole() && (isValidImageType() || isValidPdfType()) && isValidFileSize();
    }

    // Manifest PDFs (generated by Cloud Functions)
    match /manifests/{manifestId}/pdf/{fileId} {
      allow read: if hasAnyRole();
      allow write: if false; // Only server-side writes allowed
    }

    // Export files (CSV, etc.)
    match /exports/{fileName} {
      allow read: if hasAnyRole();
      allow write: if false; // Only server-side writes allowed
    }

    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
